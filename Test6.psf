<File version="2">
  <FileID>7dd35e8e-729a-42b3-965f-2eee13ef96af</FileID>
  <Preview>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
JPf1E/Hx5HmxZcP6GD38nRj54dR49/U34rlXBsXiHUej6WJVFJ4+E2eSzuYXxpmi6m9tQ3q4dwBI
DydTR+Rt+DSGjBoV0+YtiQPb1sRbb7wbX2zdFju37401i+bGu+8MjnGTZ8eW3Ydif3L9HDh4JJYu
XBib9hdFfTIgb9lzJC6cSs6v4GycyT8b+Ufz43L71a8fB+n5GACke1cqUwNARUVldCavYtJXILlf
p6bvEk92cjndySui5Iknd7DP8b3vlkz1fQd2+uqlR/ou7G+OT9+F3/sJg9yTZ/pzg9zX9Mef35xv
OojcjdIbtqqqKneDppcrd1G6r0fXzU8DpNuTHvXNZU528snly+3ov77cPcvk3t3dz3kMhHoHnXRH
lW5zz6cdunOf8rhVY/Lq9Ksth5LtunlEIn0zXbq55cc3xkefrI+u5B/pyelPPL5Z7EZc7f0UxS23
Zfrv67n7Rs8nP+5W6XamnwBId8bpdva+874rOa1H7+2X3u9uHpP8++vbOXdkV+zYuDnO1/a84bO/
2zW9P/QeTs8zHTrST1n0nGfPdXA1uW57r5veJ5Ae6XXwzf0p97+vr6d0Z/7911P6CYD0a3qe6TCX
3m9z53nLcpLubOljNEMDwNnc543Tf6dPND01R/PXh5u+dbi/0o8pfXP4u6f3lKzz+07r8/13s/TV
Yrpj/Oa4716mvtvSU9/r4t5cztst3Ul9ezv72650p9IaHR1t3zm+5zppjo7Oju+97ftbX2/ffx+4
s6UfyUu3te9x/d5+v+Q+2d7REa0tv/7t+qvO89bz/2XX069belveentKuju1Jjv99G/jlJSUPfgD
QPqXzZqaWnpelQBAxmXm7wCkA8CVZD0AgAEAADLJAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAA
yCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQA
AIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBB
BgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAA
GWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwA
AJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLI
AAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAg
gwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEA
ADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZ
AAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABk
kAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAA
QAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCAD
AABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAM
MgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAA
yCADAABkkAEAADLIAAAAGWQAAIAMMgAAQAYZAAAggwwAAJBBBgAAyCADAABkkAEAADLIAAAAGWQA
AIAMMgAAQAYZAAAggwwAAJBBBgAAyKBMDQBNTS03NxsAsq2isjobA8Dp04VRW3cpurq6JEnKfOcv
lMaF4pIHewBIN660tCyOHj8Vp5JBQJKkbFcQx5J94sWLtdHcnO5j+99/3k4DYgBISzcwHQTSr5Ik
Zb10n9jU1NTvPvNONGAGAEmSdO8yAEiSlMEMAJIkZbA7MgBcudKUrKghtzJJkjTwa07227c9ANQ3
Xs2tRJIk3T/VNt7I7cd/4wEgnR4kSdL9VboP/0cNAGPGfri1OyKar/Z8kyRJun+7luzTj5wq/dUD
wGuvD953suhs5B09E/uPSJKk+7mjp8/EyjVbfvUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAMB94nd+5/8D2UvBVLg+Jt4AAAAASUVORK5CYII=</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="form1" children="Controls">
    <Property name="ClientSize">1024, 573</Property>
    <Property name="Name">form1</Property>
    <Property name="Text">Form</Property>
    <Event name="Load">form1_Load</Event>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelServerName" children="Controls">
      <Property name="Location">36, 38</Property>
      <Property name="Name">labelServerName</Property>
      <Property name="Size">100, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">Server Name</Property>
      <Property name="TextAlign">MiddleLeft</Property>
    </Object>
    <Object type="System.Windows.Forms.ListView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ListView" children="Controls">
      <Property name="CheckBoxes">True</Property>
      <Property name="Columns">
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="Name" />
        </Item>
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="Status" />
        </Item>
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="DisplayName" />
        </Item>
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="StartupType" />
        </Item>
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="columnheader1" />
        </Item>
      </Property>
      <Property name="Location">36, 170</Property>
      <Property name="Name">ListView</Property>
      <Property name="Size">938, 391</Property>
      <Property name="TabIndex">3</Property>
      <Property name="UseCompatibleStateImageBehavior">False</Property>
      <Property name="View">Details</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Btn_GetService" children="Controls">
      <Property name="Location">36, 111</Property>
      <Property name="Name">Btn_GetService</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">Get-Service</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">Btn_GetService_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Txt_ServerName" children="Controls">
      <Property name="Location">139, 38</Property>
      <Property name="Name">Txt_ServerName</Property>
      <Property name="Size">241, 20</Property>
      <Property name="TabIndex">0</Property>
      <Event name="TextChanged">Txt_ServerName_TextChanged</Event>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Name">
    <Property name="Text">ServiceName</Property>
    <Property name="Width">120</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="Status">
    <Property name="Text">Status</Property>
    <Property name="Width">120</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="DisplayName">
    <Property name="Text">DisplayName</Property>
    <Property name="Width">120</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="StartupType">
    <Property name="Text">StartupType</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnheader1" />
  <Code><![CDATA[
$form1_Load={
	
	$Txt_ServerName.Select()
	$Txt_ServerName.Enabled = $true
	$Btn_GetService.Enabled = $false
}

#region Control Helper Functions
function Sort-ListViewColumn 
{
	<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.

	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.

	.PARAMETER ListView
		The ListView control to sort.

	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
		
	.PARAMETER  SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
#>
	param(	
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[Parameter(Mandatory=$true)]
		[int]$ColumnIndex,
		[System.Windows.Forms.SortOrder]$SortOrder = 'None')
	
	if(($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
		try{
		$local:type = [ListViewItemComparer]
	}
	catch{
	Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@  | Out-Null
	}
	#endregion
	
	if($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort()#Sort the items
	}
	else
	{
		if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending	
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder) 
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($lvGroup -eq $null)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($lvGroup -ne $null)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($SubItems -ne $null)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($lvGroup -ne $null)
		{
			$listitem.Group = $lvGroup
		}
	}
}

#endregion

$Txt_ServerName_TextChanged = {
	
	$Btn_GetService.Enabled = $true
}


$Btn_GetService_Click={
	
	
	$ServerName = $Txt_ServerName.Text
	$Services = Get-Service -ComputerName $ServerName | Select-Object -Property Status, Displayname, Name, StartType, Machinename
	
	$ListView.Items.Clear
	foreach ($Service in $Services)
	{
		Add-ListViewItem -ListView $ListView -Items "$($Service.Name)" -ImageIndex 0 -SubItems "$($Service.Displayname)", "$($Service.Status)", "$($Service.StartType)", "$($Service.Machinename)"
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>